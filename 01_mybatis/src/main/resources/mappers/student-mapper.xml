<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org/DTD Mapper 3.0//EN " "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="student">
<!-- namespace 속성? mapper를 찾기 위한 속성 -->
<!-- 
  <cache-ref namespace=""/> 
  		캐시를 쓰지 않기 때문에 반드시 지우고 하시오!!  namespace 를 저기에 쓰는 것이 아님 주의! 
  		mapper를 지정하는 값은 mapper의 속성에 namespace로 적을것
-->

<!-- 
	- 실행할 SQL문을 작성하는 곳으로 태그(select, insert, update, delete)로 작성한다.
	- SQL문은 태그의 textNode의 부분(시작태그와 끝태그 사이의 영역)에 작성하고 SQL문의 끝에는 ';' 을 작성하면 안된다.
	- 모든 SQL 태그는 id 속성(쿼리문을 구분하기 위한 속성)을 설정(주로 Dao에서 사용하는 메소드명으로 작성)해야한다.   
-->
	<insert id="insertStudent">
		INSERT INTO STUDENT VALUES(SEQ_STUDENT.NEXTVAL,'유병승','01012345678',
		'you@you.com', '경기도 시흥시', DEFAULT)
	</insert>
	
	<!-- 파라미터가 있는 insert문 작성하기 -->
	<!-- * insert, update, delete문의 경우 resultType 및 resultMap에 대한 설정 無 → 반환값 ? 항상 int형이기 때문 -->
	<!-- parameterType 속성을 이용해서 전달된 값(String name을 전달받고 있음)을 설정 -->
	<!-- parameter을 가져오는 방법 ? #{key} : DAO에서 전달해주는 매개변수에 따라 매개변수의 타입 or Map에서의 key값 -->
	<!-- 기본형(ex. int → _int), 클래스(ex. String → string), Dto(ex. Student → com.mybatis.model.dto.Student) -->
	<insert id="insertStudentByName" parameterType="string">
		INSERT INTO STUDENT VALUES(SEQ_STUDENT.NEXTVAL,#{name},'01012345678',
		'you@you.com', '경기도 시흥시', DEFAULT)
	</insert>
	
	
	<insert id="insertStudentByMap" parameterType="string">
		INSERT INTO STUDENT VALUES(SEQ_STUDENT.NEXTVAL, #{name}, #{tel}, #{email}, #{addr}, DEFAULT)
	</insert>
	
	
	<insert id="insertStudentAll" parameterType="com.mybatis.model.dto.Student">
		INSERT INTO STUDENT VALUES(SEQ_STUDENT.NEXTVAL, #{studentName}, #{studentTel}, #{studentEmail}, #{studentAddr}, DEFAULT)
	</insert>
	
	<update id="updateStudentAll" parameterType="com.mybatis.model.dto.Student">
		UPDATE STUDENT SET STUDENT_TEL=#{studentTel}, STUDENT_EMAIL=#{studentEmail}, STUDENT_ADDR=#{studentAddr} WHERE STUDENT_NO=#{studentNo}
	</update>
	
	<delete id="deleteStudentAll" parameterType="com.mybatis.model.dto.Student">
		DELETE FROM STUDENT WHERE STUDENT_NO=#{studentNo}
	</delete>
	
	<!-- SELECT문 실행하기 → select 태그를 이용해야하며 resultType || resultMap 속성 중 1개를 "무조건" 설정해줘야한다. -->
	<!-- 해당 설정(resultType, resultMap)은 반환되는 값에 대한 타입을 설정해주는 개념으로 Mybatis가 가져온 DB에 정보를
		 담당하는 Dto 객체에 저장한다. 
		resultType : 필드명, 컬럼명이 일치할 경우 사용 → java 타입을 패키지명까지 작성
		resultMap : 필드명, 컬럼명이 다를 경우 사용 → <resultMap>태그에 설정된 id값을 작성	 
	-->
		 
	<select id="selectStudentCount" resultType="_int">
	<!-- 현재는 1개의 row의 결과 값만을 가져오며 더불어 가져오는 컬럼의 자료형이 기본형(int)이기 때문에 resultType을 사용 -->
		SELECT COUNT(*) FROM STUDENT
	</select>
	 
	<!-- 
	* 별칭(AS)을 사용하여 DTO 클래스의 Field명과 DB의 Column명을 일치시킴으로써 resultMap이 아닌, resultType을 사용함  
	<select id="selectStudentByNo" parameterType="_int" resultType="com.mybatis.model.dto.Student">
		SELECT STUDENT_NO AS STUDENTNO, STUDENT_NAME AS STUDENTNAME, STUDENT_TEL AS STUDENTTEL, 
				STUDENT_EMAIL AS STUDENTEMAIL, STUDENT_ADDR AS STUDENTADDR, REG_DATE
		FROM STUDENT WHERE STUDENT_NO=#{no}
	</select> 
	* 하지만, 매번 별칭을 사용하여 오탈자의 위험성을 높히는 것보다는 resultMap을 사용하여 일치시켜놓고 사용하는 것이 용이하다.
	
	<resultMap> 태그를 이용해서 필요한 컬럼을 Dto의 필드와 Mapping 함
	- <resultMap> 속성 → id(resultMap의 이름), type(매핑할 DTO 명칭 = 패키지명+클래스명)
	- <resultMap>의 자식태그 : <id> / <result> / <association> / <collection>
		1) <id>			 :  PK 컬럼을 매핑할 때 사용하는 태그
		2) <result>		 :  일반 컬럼을 매핑할 때 사용하는 태그
			* <id>, <result> 속성 → ① column : 컬럼명(대소문자 구분X) / ② property : 필드명(대소문자 구분O)
		3) <association> :  DTO가 "has a"로 다른 객체를 가지고 있을 때 사용하는 태그 → 추후에 배울 예정
		4) <collection>  :  DTO가 "has a"로 다른 객체를 가지고 있을 때 사용하는 태그 → 추후에 배울 예정
	 -->
	 <resultMap id="studentMap" type="com.mybatis.model.dto.Student">
	 	<id column="student_no" property="studentNo"/>	<!-- student_no(pk컬럼) → studentNo(DTO 필드) -->
	 	<result column="student_name" property="studentName"/>	<!-- student_name(일반 컬럼) → studentName(DTO 필드)  -->
	 	<result column="student_tel" property="studentTel"/>
	 	<result column="student_Email" property="studentEmail"/>
	 	<result column="student_Addr" property="studentAddr"/>
	 <!-- 
	 	reg_date는 컬럼과 필드값이 같기 때문에 여기서는 쓰지 않아도 되지만, 
	 	has a 관계로 인해 1:多 관계일 경우(=association, collection 태그가 있을 경우 매핑을 하지 못하기 때문에) 
	 	무조건 다 써줘야함 
	 -->
	 </resultMap>
	 <select id="selectStudentByNo" parameterType="_int" resultMap="studentMap">
	 	SELECT * FROM STUDENT WHERE STUDENT_NO=#{no}
	 </select>
	 
	 <!-- selectList에 대한 쿼리문 -->
	 <select id="selectStudentAll" resultMap="studentMap">
	 <!-- 
	 	resultMap ? 반환형에 대해 작성해줘야한다. 하지만, 현재의 쿼리문은 selectList에 대한 쿼리문으로 List가 반환형은 고정
	 				따라서, 어떠한 List인지를 결정해주는 Generic 요소에 대해서 resultType or resultMap에 작성한다.
	 -->
	 		SELECT * FROM STUDENT
	 </select>
	 
	 <select id="searchStudentByName" resultMap="studentMap" parameterType="string">
	 	SELECT * FROM STUDENT WHERE STUDENT_NAME LIKE #{name}
	 	<!-- 내 풀이는 Dao에서 매개변수에 %를 합쳐서 보냈음 -->
	 	<!-- 
	 		강사님 풀이
	 		*  #{name} 의 의미는 preparedStatement에서 setString까지 실행한 값으로 보면 된다.
	 		   따라서, '%#{name}%' 의 의미 ? '%'test'%' 와 같은 형태로 들어가기 때문에
	 		   '%'||#{name}||'%' 라고 써도 된다.
	 		
	 		*  ${name}으로 넣을 경우에도 실행된다.
	 		   = 타입에 신경쓰지 않고 replace한다는 느낌으로 리터럴 표시 없이 집어 넣는다.
	 		  	 따라서, 해당 기호는 문구 자체로 쓰고 싶을 때는 사용할 수 있다.
	 		  	 (ex. column에 대해 변경할 경우) → 더불어 위의 문제같은 경우 '%${name}%'도 가능 	 		
	 	 -->
	</select>
	 
	<select id="selectStudentByNameMap" resultType="map" parameterType="_int">
	 	SELECT * FROM STUDENT WHERE STUDENT_NO=#{no}
	</select>
	
	<select id="selectAllByMap" resultType="map">
		SELECT * FROM STUDENT
	</select>
	
	<select id="selectStudentPaging" resultMap="studentMap" parameterType="map">
		SELECT * FROM STUDENT ORDER BY REG_DATE DESC
	</select>
</mapper>
