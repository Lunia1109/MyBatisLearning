<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org/DTD Mapper 3.0//EN " "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="student">
<!-- 
  <cache-ref namespace=""/> 
  		캐시를 쓰지 않기 때문에 반드시 지우고 하시오!!  namespace 를 저기에 쓰는 것이 아님 주의! 
  		mapper의 속성에 적을것
-->

<!-- 
	- 실행할 SQL문을 작성하는 곳으로 태그(select, insert, update, delete)로 작성한다.
	- SQL문은 태그의 textNode의 부분에 작성하고 SQL문의 끝에는 ';' 을 작성하면 안된다.
	- 모든 SQL 태그는 id 속성을 설정(주로 Dao에서 사용하는 메소드명으로 작성)해야한다.   
-->
	<insert id="insertStudent">
		INSERT INTO STUDENT VALUES(SEQ_STUDENT.NEXTVAL,'유병승','01012345678',
		'you@you.com', '경기도 시흥시', DEFAULT)
	</insert>
	
	<!-- 파라미터가 있는 insert문 작성하기 -->
	<!-- parameterType 속성을 이용해서 전달된 값(String name을 전달받고 있음)을 설정 -->
	<!-- parameter을 가져오는 방법 ? #{key} : 매개변수명 or Map에서의 key값 -->
	<insert id="insertStudentByName" parameterType="string">
		INSERT INTO STUDENT VALUES(SEQ_STUDENT.NEXTVAL,#{name},'01012345678',
		'you@you.com', '경기도 시흥시', DEFAULT)
	</insert>
	
	
	<insert id="insertStudentByMap" parameterType="string">
		INSERT INTO STUDENT VALUES(SEQ_STUDENT.NEXTVAL, #{name}, #{tel}, #{email}, #{addr}, DEFAULT)
	</insert>
	
	
	<insert id="insertStudentAll" parameterType="com.mybatis.model.dto.Student">
		INSERT INTO STUDENT VALUES(SEQ_STUDENT.NEXTVAL, #{studentName}, #{studentTel}, #{studentEmail}, #{studentAddr}, DEFAULT)
	</insert>
	
	<update id="updateStudentAll" parameterType="com.mybatis.model.dto.Student">
		UPDATE STUDENT SET STUDENT_TEL=#{studentTel}, STUDENT_EMAIL=#{studentEmail}, STUDENT_ADDR=#{studentAddr} WHERE STUDENT_NO=#{studentNo}
	</update>
	
	<delete id="deleteStudentAll" parameterType="com.mybatis.model.dto.Student">
		DELETE FROM STUDENT WHERE STUDENT_NO=#{studentNo}
	</delete>
	
	<!-- SELECT문 실행하기 → select 태그를 이용해야하며 resultType || resultMap 속성을 설정해줘야한다. -->
	<!-- 해당 설정(resultType, resultMap)은 반환되는 값에 대한 타입을 설정해주는 개념으로 Mybatis가 가져온 DB에 정보를
		 담당하는 Dto 객체에 저장한다. 
		resultType : 필드명, 컬럼명이 일치할 경우 사용 → java 타입을 패키지명까지 작성
		resultMap : 필드명, 컬럼명이 다를 경우 사용 → <resultMap>태그에 설정된 id값을 작성	 
	-->
		 
	<select id="selectStudentCount" resultType="_int">
		SELECT COUNT(*) FROM STUDENT
	</select>
	
	
	<!-- 
		<resultMap> 태그를 이용해서 필요한 컬럼을 Dto의 필드와 매핑해줌
		<resultMap> 속성 → id(resultMap의 이름), type(매핑할 DTO 명칭 = 패키지명+클래스명)
		
		<resultMap>의 자식태그 : <id> / <result> / <association> / <collection>
		1) <id>			 :  PK 컬럼을 매핑할 때 사용하는 태그
		2) <result>		 :  일반 컬럼을 매핑할 때 사용하는 태그
			* <id>, <result> 속성 → ① column : 컬럼명(대소문자 구분X) / ② property : 필드명(대소문자 구분O)
		3) <association> :  DTO가 has a로 다른 객체를 가지고 있을 때 사용하는 태그 → 추후에 배울 예정
		4) <collection>  :  DTO가 has a로 다른 객체를 가지고 있을 때 사용하는 태그 → 추후에 배울 예정
	 -->
	 <resultMap id="studentMap" type="com.mybatis.model.dto.Student">
	 	<id column="student_no" property="studentNo"/>
	 	<result column="student_name" property="studentName"/>
	 	<result column="student_tel" property="studentTel"/>
	 	<result column="student_Email" property="studentEmail"/>
	 	<result column="student_Addr" property="studentAddr"/>
	 	<!-- reg_date는 컬럼과 필드값이 같기 때문에 여기서는 쓰지 않아도 되지만, has a 관계에서는 무조건 다 써줘야함 -->
	 </resultMap>
	 <select id="selectStudentByNo" parameterType="_int" resultMap="studentMap">
	 	SELECT * FROM STUDENT WHERE STUDENT_NO=#{no}
	 </select>
	 
	 
	<!-- <select id="selectStudentByNo" parameterType="_int" resultType="com.mybatis.model.dto.Student">
		SELECT STUDENT_NO AS STUDENTNO, STUDENT_NAME AS STUDENTNAME, STUDENT_TEL AS STUDENTTEL, 
				STUDENT_EMAIL AS STUDENTEMAIL, STUDENT_ADDR AS STUDENTADDR, REG_DATE
		FROM STUDENT WHERE STUDENT_NO=#{no}
	</select> -->
	
</mapper>
