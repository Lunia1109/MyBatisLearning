<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org/DTD Mapper 3.0//EN " "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="emp">
	<!-- type=emp ? config.xml에서 Employee 클래스에 emp라는 별칭을 부여했기에 사용 가능 -->
	<resultMap id="employeeMap" type="emp">	
	<!-- resultMap에서 DB에서 column과 DTO의 필드명이 다른 것들만 선언해줘도 된다. -->
	<!-- 단, JOIN을 이용하여 객체를 필드로 담아오는 태그(ex. association)를 사용하면 작성해줘야함 -->
      <id column="emp_id" property="empId"/>
      <result column="emp_name" property="empName"/>
      <result column="emp_no" property="empNo"/>
      <!-- <result column="dept_code" property="deptCode"/> -->
      <result column="job_code" property="jobCode"/>
      <result column="sal_level" property="salLevel"/>
      <result column="manager_id" property="managerId"/>
      <result column="hire_date" property="hireDate"/>
      <result column="ent_date" property="entDate"/>
      <!-- 밑의 result 태그들은 association or collection 태그를 사용했기 때문에 설정을 해줘야지만 출력이 가능해짐
      	   만약, association이 없다면 동일한 컬럼일 경우 생략해도 무관하다. -->
      <result column="phone" property="phone"/>
      <result column="salary" property="salary"/>
      <result column="email" property="email"/>
      <result column="phone" property="phone"/>
      <result column="bonus" property="bonus"/>
      <!-- 
      	association ? has a 관계 중 1:1 관계일 때 Mapping하는 태그
      	Content Model : (constructor?, id*, result*, association*, collection*, discriminator?)의 형태에 따라
      				 id → result → association 순으로 작성한다. 
      				 즉, Class안에 다른 Class를 필드로 가지며 1:1로 DB상 매칭되는 관계일 때 사용하는 태그
      -->
      <association resultMap="deptMap" property="dept"/>
      <!-- Department 타입의 필드 dept에 어떠한 테이블과 매칭시킬지에 대한 설정으로 resultMpa 또한 사용 -->
	</resultMap>
	<resultMap id="deptMap" type="department">
	<!-- config.xml에서 typeAlias로 department를 등록하여 type을 위와같이 선언함 -->
		<id column="dept_id" property="deptId"/>
		<result column="dept_title" property="deptTitle"/>
		<result column="location_id" property="locationId"/>
		<!-- has a 관계 중 1:多를 구현하는 태그 -->
		<collection property="employees" resultMap="employeeMap"/>
	</resultMap>
	
	<select id="selectDeptById" parameterType="string" resultMap="deptMap">
		SELECT * FROM DEPARTMENT LEFT JOIN EMPLOYEE ON DEPT_ID = DEPT_CODE WHERE DEPT_ID=#{deptId}
	</select>
	
	
	<select id="selectEmpAll" resultMap="employeeMap">
		SELECT * FROM EMPLOYEE JOIN DEPARTMENT ON DEPT_CODE=DEPT_ID ORDER BY EMP_ID
	</select>
	<!-- 
		SELECT e.*, decode(substr(emp_no,8,1),'1','M','2','F') AS gender 이라고 하면
		주민등록번호의 8번째 글자에서 1글자를 따와서 '1'일 경우는 'M'으로, '2'일 경우에는 'F'로 설정하는 가상 컬럼 gender를 추가함 
	 -->
	<select id="searchEmp" parameterType="map" resultMap="employeeMap">
		SELECT * FROM (
			SELECT E.*, D.*, DECODE(SUBSTR (EMP_NO, 8, 1),'1', 'M', '2', 'F', '3', 'M', '4', 'F') AS GENDER
			FROM EMPLOYEE E JOIN DEPARTMENT D ON DEPT_CODE = DEPT_ID
			) 
		 <!-- <where> -->
		 <trim prefix="where" prefixOverrides="AND|OR">
		 	<!-- SQL문 실행할 "단위별로" if 문을 사용하여 동적으로 조건문을 실행한다. -->
			<if test="type!=null and type!='' and keyword!=''">	
			<!-- input 태그의 경우에는 안에 사용자가 어떠한 값을 작성하고 넘기지 않으면 공란이 넘어옴 → 따라서 null인지와 ''인지를 작성 -->
			<!-- ★ test 문 안에서는 $ or # 을 쓰지 않고 매개변수의 key값 혹은 필드명을 작성한다 -->
				${type} LIKE '%${keyword}%' 
			</if>
			<if test='gender!=null and gender!=""'>
			<!-- gender != '' 의 경우 1글자는 char 타입으로 인식하여 숫자로 parsing한다. 따라서 위와같이 표현해야함 -->
				AND GENDER=#{gender}
			</if>
			<if test="salary!=0 and salFlag!=null and salFlag!=''">
				<!-- <if test='salFlag == "ge"'>
					AND SALARY >= #{salary}
				</if>
				<if test='salFlag == "le"'>
					AND SALARY &lt;= #{salary}
					AND SALARY <![CDATA[<=]]> #{salary}	xml의 escaping 처리
				</if> -->
				
				<choose>
					<when test='salFlag eq "ge"'>	
					<!-- 동등비교를 위해 == 가 아니라 eq를 써도 된다. but, &&는 무조건 and -->
						AND SALARY >= #{salary}
					</when>
					<otherwise>
						AND SALARY <![CDATA[<=]]> #{salary}
					</otherwise>
				</choose>
			</if>
			<if test="bonus!=-9.99 and bonusFlag!=null and bonusFlag!=''">
				<if test="bonusFlag eq 'ge'">
					AND BONUS >= #{bonus}
				</if>
				<if test="bonusFlag eq 'le'">
					AND BONUS <![CDATA[<=]]> #{bonus} OR BONUS IS NULL
				</if>
			</if>
			<!-- Client가 직책별 조회를 실행했을 때 실행할 SQL문 -->
			<if test="jobCodes!=null and jobCodes!=''">
				<!--
					 직업 코드별로 사원을 조회하는 방법 
					 SELECT * FROM EMPLOYEE WHERE JOB_CODE IN ('J1', 'J2', 'J3', ...)
					 
					 반복문을 통해서 IN안의 값들을 만들기 → foreach 태그를 사용
					  : <c:forEach> 태그와 유사
					 * <c:forEach var="item" items="${member }"> </c:forEach> 생각할 것
					 [ foreach 태그 속성 ] 
					 ① collection : 배열이나 List 방식의 데이터 타입을 대입하는 곳 → JSTL의 items 속성과 동일 
					 ② item : collection 으로 부터 나오는 1개의 값을 저장하는 변수명 → JSTL의 var 속성과 동일 
					 ③ open : first 일 때, 출력할 값을 설정하는 속성 → 0번 index의 item을 출력하기 전에 출력할 내용이 있을 때 사용
					 ④ close : last일 때, 출력할 값을 설정하는 속성 → 반복문이 다 끝나고 나서 출력할 내용이 있을 때 사용
					 ⑤ separator : 반복 할 때마다 출력할 값을 설정하는 속성 → 구분자의 역할
					 ⑥ index : 인덱스 번호를 저장하는 변수명 → 조회할 때 인덱스 번호와 같이 출력할 때 보통 사용한다. 
				-->
				AND JOB_CODE IN 
				<foreach collection="jobCodes" item="job" open="(" close=")" separator=",">
					#{job}		<!-- ${job}은 불가능하다! → ('J1', 'J2', 'J3') 처럼 각 item을 문자열 처리를 해야하기 때문 -->
				</foreach>
			</if> 
		</trim>
		<!-- </where> -->
	</select>
	
</mapper>
